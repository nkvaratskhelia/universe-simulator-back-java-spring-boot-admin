plugins {
    id 'java'
    id 'idea'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'org.springframework.boot' version '3.2.1'
    id 'org.sonarqube' version '4.4.1.3373'
    id 'org.owasp.dependencycheck' version '9.0.6'
}

group = 'com.example.universe.simulator'
version = '1.0.0'

java {
    sourceCompatibility = '21'
}

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        name = 'GitHubPackages'
        url = 'https://maven.pkg.github.com/nkvaratskhelia/universe-simulator-back-java-common'
        credentials {
            username = System.getenv('US_GITHUB_PACKAGES_USER')
            password = System.getenv('US_GITHUB_PACKAGES_TOKEN')
        }
        metadataSources {
            gradleMetadata()
        }
    }
}

ext {
    set('commonVersion', '2.8.4')
    set('logstashLogbackEncoderVersion', '7.4')
}

dependencyManagement {
    imports {
        mavenBom 'org.springframework.cloud:spring-cloud-dependencies:2023.0.0'
        mavenBom 'de.codecentric:spring-boot-admin-dependencies:3.2.0'
    }
}

dependencies {
    implementation "com.example.universe.simulator:common:${commonVersion}"
    implementation 'de.codecentric:spring-boot-admin-starter-server'
    runtimeOnly 'org.springframework.cloud:spring-cloud-starter-consul-config'
    // needed for spring cloud load balancer
    runtimeOnly 'com.github.ben-manes.caffeine:caffeine'
    runtimeOnly "net.logstash.logback:logstash-logback-encoder:${logstashLogbackEncoderVersion}"
    // needed to prevent netty dns error on aarch_64 (mac M1)
    runtimeOnly "io.netty:netty-resolver-dns-native-macos:${dependencyManagement.importedProperties['netty.version']}:osx-aarch_64"
    runtimeOnly 'de.codecentric:spring-boot-admin-starter-client'
}

idea {
    module {
        downloadJavadoc = true
    }
}

sonarqube {
    properties {
        property 'sonar.host.url', 'https://sonarcloud.io'
        property 'sonar.organization', 'universe-simulator'
        property 'sonar.login', System.getenv('US_SONARQUBE_TOKEN')
    }
}

dependencyCheck {
    failBuildOnCVSS = 7
}

bootBuildImage {
    imageName = "universesimulator/${project.name}:${System.getenv('GITHUB_RUN_NUMBER')}"
    publish = true
    docker {
        publishRegistry {
            username = System.getenv('US_DOCKER_REGISTRY_USER')
            password = System.getenv('US_DOCKER_REGISTRY_TOKEN')
        }
    }
}
